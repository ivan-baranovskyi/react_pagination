{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","total","perPage","currentPage","onPageChange","totalPages","Math","ceil","handlePageChange","page","className","cn","disabled","href","onClick","pageLinks","i","isCurrentPage","push","active","renderPageLinks","Array","from","length","min","_","index","map","itemNumber","items","to","numbers","n","getNumbers","App","useState","setCurrentPage","setPerPage","totalItems","id","value","onChange","changeEvent","newPerPage","parseInt","target","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"oNAWaA,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QAGI,IAFJC,mBAEI,MAFU,EAEV,EADJC,EACI,EADJA,aAEMC,EAAaC,KAAKC,KAAKN,EAAQC,GAE/BM,EAAmB,SAACC,GACpBA,IAASN,GACXC,EAAaK,IAkCjB,OACE,qCACE,qBAAIC,UAAU,aAAd,UACE,oBACEA,UAAWC,IACT,YACA,CACEC,SAA0B,IAAhBT,IAJhB,SAQE,mBACE,UAAQ,WACRO,UAAU,YACVG,KAAK,QACL,gBAA+B,IAAhBV,EACX,OACA,QACJW,QAAS,WACHX,EAAc,GAChBK,EAAiBL,EAAc,IATrC,oBAzCgB,WAGtB,IAFA,IAAMY,EAA4B,GADN,WAGnBC,GACP,IAAMC,EAAgBD,IAAMb,EAE5BY,EAAUG,KACR,oBACER,UAAWC,IACT,YACA,CACEQ,OAAQF,IAJd,SAQE,mBACE,UAAQ,WACRP,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,kBAAMN,EAAiBQ,IAJlC,SAMGA,QAlBAA,EAAI,EAAGA,GAAKX,EAAYW,GAAK,EAAI,EAAjCA,GAwBT,OAAOD,EA8BFK,GACD,oBAAIV,UAAWC,IAAG,YAChB,CACEC,SAAUT,IAAgBE,IAF9B,SAKE,mBACE,UAAQ,WACRK,UAAU,YACVG,KAAK,QACL,gBAAeV,IAAgBE,EAC3B,OACA,QACJS,QAAS,WACHX,EAAcE,GAChBG,EAAiBL,EAAc,IATrC,uBAkBJ,6BACGkB,MAAMC,KACL,CACEC,OAAQjB,KAAKkB,IACXtB,EACAD,GAASE,EAAc,GAAKD,KAGhC,SAACuB,EAAGC,GAAJ,OAAevB,EAAc,GAAKD,EAAUwB,EAAQ,KACpDC,KAAI,SAACC,GAAD,OACJ,oBAEE,UAAQ,OAFV,wBAIWA,IAHJA,YC/GXC,ECNC,SAAoBP,EAAcQ,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIV,EAAMU,GAAKF,EAAIE,GAAK,EAC/BD,EAAQb,KAAKc,GAGf,OAAOD,EDDKE,CAAW,EAAG,IACzBN,KAAI,SAAAK,GAAC,qBAAYA,MAEPE,EAAgB,WAC3B,MAAsCC,mBAAS,GAA/C,mBAAOhC,EAAP,KAAoBiC,EAApB,KACA,EAA8BD,mBAAS,GAAvC,mBAAOjC,EAAP,KAAgBmC,EAAhB,KAEMC,EAAaT,EAAMN,OAyBzB,OACE,sBAAKb,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWP,EADX,oBAXMA,EAAc,GAAKD,EAAU,EAWnC,cAPKI,KAAKkB,IAAIrB,EAAcD,EAASoC,GAOrC,eACoFA,EADpF,OAIA,sBAAK5B,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACR6B,GAAG,kBACH7B,UAAU,eACV8B,MAAOtC,EACPuC,SAhCkB,SAC1BC,GAEA,IAAMC,EAAaC,SAASF,EAAYG,OAAOL,MAAO,IAEtDH,EAAWM,GACXP,EAAe,IAqBT,UAOE,wBAAQI,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOM,QAAQ,kBAAkBpC,UAAU,qBAA3C,+BAMF,cAAC,EAAD,CACET,MAAOqC,EACPpC,QAASA,EACTC,YAAaA,EACbC,aAzDmB,SACvBK,GAEA2B,EAAe3B,UEfnBsC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.046192b9.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\nimport cn from 'classnames';\n\ntype Props = {\n  total: number,\n  perPage: number,\n  currentPage?: number,\n  onPageChange: (page: number) => void;\n\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage = 1,\n  onPageChange,\n}) => {\n  const totalPages = Math.ceil(total / perPage);\n\n  const handlePageChange = (page: number) => {\n    if (page !== currentPage) {\n      onPageChange(page);\n    }\n  };\n\n  const renderPageLinks = () => {\n    const pageLinks: ReactElement[] = [];\n\n    for (let i = 1; i <= totalPages; i += 1) {\n      const isCurrentPage = i === currentPage;\n\n      pageLinks.push(\n        <li\n          className={cn(\n            'page-item',\n            {\n              active: isCurrentPage,\n            },\n          )}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${i}`}\n            onClick={() => handlePageChange(i)}\n          >\n            {i}\n          </a>\n        </li>,\n      );\n    }\n\n    return pageLinks;\n  };\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li\n          className={cn(\n            'page-item',\n            {\n              disabled: currentPage === 1,\n            },\n          )}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={currentPage === 1\n              ? 'true'\n              : 'false'}\n            onClick={() => {\n              if (currentPage > 1) {\n                handlePageChange(currentPage - 1);\n              }\n            }}\n          >\n            «\n          </a>\n        </li>\n        {renderPageLinks()}\n        <li className={cn('page-item',\n          {\n            disabled: currentPage === totalPages,\n          })}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={currentPage === totalPages\n              ? 'true'\n              : 'false'}\n            onClick={() => {\n              if (currentPage < totalPages) {\n                handlePageChange(currentPage + 1);\n              }\n            }}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n\n      <ul>\n        {Array.from(\n          {\n            length: Math.min(\n              perPage,\n              total - (currentPage - 1) * perPage,\n            ),\n          },\n          (_, index) => (currentPage - 1) * perPage + index + 1,\n        ).map((itemNumber) => (\n          <li\n            key={itemNumber}\n            data-cy=\"item\"\n          >\n            {`Item ${itemNumber}`}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [perPage, setPerPage] = useState(5);\n\n  const totalItems = items.length;\n\n  const handlePageChange = (\n    page: number,\n  ) => {\n    setCurrentPage(page);\n  };\n\n  const handlePerPageChange = (\n    changeEvent: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    const newPerPage = parseInt(changeEvent.target.value, 10);\n\n    setPerPage(newPerPage);\n    setCurrentPage(1);\n  };\n\n  const calculateStartItem = () => {\n    return (currentPage - 1) * perPage + 1;\n  };\n\n  const calculateEndItem = () => {\n    return Math.min(currentPage * perPage, totalItems);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${calculateStartItem()} - ${calculateEndItem()} of ${totalItems})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={handlePerPageChange}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      {/* Move this markup to Pagination */}\n      <Pagination\n        total={totalItems}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={handlePageChange}\n      />\n\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}